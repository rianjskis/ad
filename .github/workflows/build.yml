name: Update SRS Rule

on:
  schedule:
    - cron: "0 0 * * *"  # 每天 0 点 UTC
  workflow_dispatch:      # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y wget jq tar python3

      - name: Download latest sing-box (official release)
        run: |
          # 获取最新正式 release 的 tag
          SB_TAG=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)
          SB_VER=${SB_TAG#v}
          wget -qO sing-box.tar.gz "https://github.com/SagerNet/sing-box/releases/download/${SB_TAG}/sing-box-${SB_VER}-linux-amd64.tar.gz"
          tar -xzf sing-box.tar.gz
          mv sing-box-${SB_VER}-linux-amd64/sing-box ./sing-box
          chmod +x ./sing-box

      # === 原有规则 ===
      - name: Download latest rule json
        run: |
          wget -qO AWAvenue-Ads-Rule-Singbox.json "https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Singbox.json"

      - name: Convert json to srs
        run: |
          ./sing-box rule-set compile --output AWAvenue-Ads-Rule-Singbox.srs AWAvenue-Ads-Rule-Singbox.json

      # === 新增规则 ===
      - name: Download httpdns rule json
        run: |
          wget -qO httpdns.json "https://raw.githubusercontent.com/QuixoticHeart/rule-set/ruleset/singbox/version3/httpdns.json"

      # === 使用 Python 拆分为域名与 IP 规则 ===
      - name: Split httpdns.json into domain and ip rules (Python)
        run: |
          cat > split_rules.py <<'PY'
          import json, sys
          from pathlib import Path

          if len(sys.argv) != 4:
              print("Usage: split_rules.py IN_JSON OUT_DOMAIN_JSON OUT_IP_JSON", file=sys.stderr)
              sys.exit(2)

          infile = Path(sys.argv[1])
          out_domain = Path(sys.argv[2])
          out_ip = Path(sys.argv[3])

          data = json.loads(infile.read_text(encoding='utf-8'))
          rules_key = "rules" if "rules" in data else ("rule" if "rule" in data else None)

          if rules_key:
              rules = data[rules_key]
              top = {k: v for k, v in data.items() if k != rules_key}
          elif isinstance(data, list):
              rules = data
              top = {}
          else:
              rules = [data]
              top = {}

          domain_rules = []
          ip_rules = []

          domain_fields = {"domain", "domain_suffix", "domain_keyword", "domain_regex", "domain_prefix"}
          ip_fields = {"ip_cidr", "ip_is_private", "ip_range"}

          for r in rules:
              has_domain = any(f in r for f in domain_fields)
              has_ip = any(f in r for f in ip_fields)
              if not has_domain and not has_ip:
                  text = json.dumps(r)
                  if '"ip_cidr"' in text or '"ip_is_private"' in text:
                      has_ip = True
                  if '"domain"' in text or '"domain_suffix"' in text or '"domain_keyword"' in text or '"domain_regex"' in text:
                      has_domain = True

              if has_domain:
                  domain_rules.append(r)
              if has_ip:
                  ip_rules.append(r)

          def build_out(top, rules_key_name, rules_list):
              if rules_key_name:
                  out = dict(top)
                  out[rules_key_name] = rules_list
                  return out
              else:
                  return rules_list

          out_domain = build_out(top, rules_key, domain_rules)
          out_ip = build_out(top, rules_key, ip_rules)

          Path(sys.argv[2]).write_text(json.dumps(out_domain, ensure_ascii=False, indent=2), encoding='utf-8')
          Path(sys.argv[3]).write_text(json.dumps(out_ip, ensure_ascii=False, indent=2), encoding='utf-8')

          print(f"Domain rules: {len(domain_rules)}")
          print(f"IP rules: {len(ip_rules)}")
          PY

          python3 split_rules.py httpdns.json httpdns-domain.json httpdns-ip.json
          echo "== Domain rules count =="
          jq '.rules | length' httpdns-domain.json 2>/dev/null || jq 'length' httpdns-domain.json
          echo "== IP rules count =="
          jq '.rules | length' httpdns-ip.json 2>/dev/null || jq 'length' httpdns-ip.json

      # === 分别编译为 srs 文件 ===
      - name: Convert httpdns domain rules to srs
        run: |
          ./sing-box rule-set compile --output httpdns-domain.srs httpdns-domain.json

      - name: Convert httpdns ip rules to srs
        run: |
          ./sing-box rule-set compile --output httpdns-ip.srs httpdns-ip.json

      # === 提交并推送所有变化 ===
      - name: Commit and push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add AWAvenue-Ads-Rule-Singbox.srs httpdns-domain.srs httpdns-ip.srs
          git commit -m "Update SRS rule $(date -u +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push

      - name: 删除工作流程运行
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          retain_days: 5
          keep_minimum_runs: 5
